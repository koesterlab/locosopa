from pathlib import Path
import yaml
import os
import hashlib
import json
import shutil
import tarfile
import urllib.request

page_config = yaml.load(open(config["page_config"]), Loader=yaml.SafeLoader)
page_config_dir = Path(config["page_config"]).parent
doc_config = page_config.get("docs", None)
assets = page_config.get("assets", [])


rule all:
    input:
        # TODO add print_landscape once fixed
        expand(["build/{page}.html", "build/{page}.css"], page=["index", "print_landscape"]),
        expand("build/{asset}", asset=assets),
        "build/docs" if doc_config else [],
        "build/fediwall/wall-config.json",


rule build_css:
    input:
        "build/{page}.html",
        css="src/style.css",
    output:
        "build/{page}.css",
    conda:
        "envs/nodejs.yaml"
    shell:
        "npm install; npx tailwindcss -i {input.css} -o {output}"


rule build_html:
    input:
        config=config["page_config"],
        page="src/{page}.ytml.yaml",
    output:
        "build/{page}.html",
    wildcard_constraints:
        page="[^/]+",
    conda:
        "envs/ytml.yaml"
    shell:
        "ytml src build {input.config} {wildcards.page}.ytml.yaml"


rule build_docs:
    input:
        page_config=config["page_config"],
        src=lambda w: page_config_dir / page_config["docs"]["src"],
        sphinx_conf=workflow.source_path("../src/docs/conf.py"),
        docutils_conf=workflow.source_path("../src/docs/docutils.conf"),
        css=workflow.source_path("../src/docs/custom.css"),
    output:
        directory("build/docs"),
    conda:
        "envs/sphinx.yaml"
    params:
        page_config=lambda w, input: os.path.abspath(input.page_config),
        logos=[str(page_config_dir / logo) for logo in page_config["logo"].values()],
    shell:
        "tmpdir=$(mktemp -d); "
        "cp {input.sphinx_conf} $tmpdir; "
        "cp {input.docutils_conf} $tmpdir; "
        "mkdir $tmpdir/_static; "
        "cp {params.logos} $tmpdir/_static; "
        "cp {input.css} $tmpdir/_static; "
        "LOCOSOPA_CONFIG={params.page_config} sphinx-build -b html -c $tmpdir {input.src} {output}"


rule copy_asset:
    input:
        page_config_dir / "{asset}",
    output:
        "build/{asset}",
    shell:
        "mkdir -p $(dirname {output}); "
        "cp {input} {output}"


rule build_fediwall:
    output:
        config="build/fediwall/wall-config.json",
        directory=directory("build/fediwall")
    params:
        version="v1.4.0",
        expected_sha256="9aeca19df37e1c872efa0e8047660eb15cfe24f8b14e5c198a20d966e7e456bc"
    run:
        import tempfile
        
        # Download fediwall with checksum verification
        fedi_wall_version = params.version
        fedi_wall_sha256 = params.expected_sha256
        download_url = f"https://github.com/defnull/fediwall/releases/download/{fedi_wall_version}/fediwall-1.4.0.tgz"
        
        with tempfile.NamedTemporaryFile(suffix='.tgz', delete=False) as tmp_file:
            urllib.request.urlretrieve(download_url, tmp_file.name)
            
            # Verify SHA256 checksum
            with open(tmp_file.name, 'rb') as f:
                actual_sha256 = hashlib.sha256(f.read()).hexdigest()
            
            if actual_sha256 != fedi_wall_sha256:
                raise ValueError(f"SHA256 checksum verification failed! Expected: {fedi_wall_sha256}, Actual: {actual_sha256}")
            
            print("âœ“ SHA256 checksum verification passed")
            
            # Extract to temporary directory
            with tempfile.TemporaryDirectory() as temp_dir:
                with tarfile.open(tmp_file.name, 'r:gz') as tar:
                    tar.extractall(temp_dir)
                
                # Find the extracted directory (strip-components equivalent)
                extracted_dirs = [d for d in Path(temp_dir).iterdir() if d.is_dir()]
                if len(extracted_dirs) == 1:
                    source_dir = extracted_dirs[0]
                else:
                    # If multiple dirs or files, assume the temp_dir is the source
                    source_dir = Path(temp_dir)
                
                # Create fediwall directory in build
                fediwall_dir = Path("build/fediwall")
                fediwall_dir.mkdir(parents=True, exist_ok=True)
                
                # Copy fediwall files
                for item in source_dir.iterdir():
                    if item.is_dir():
                        shutil.copytree(item, fediwall_dir / item.name, dirs_exist_ok=True)
                    else:
                        shutil.copy2(item, fediwall_dir / item.name)
            
            # Clean up downloaded file
            os.unlink(tmp_file.name)
        
        # Create custom config for Snakemake hashtag
        wall_config = {
            "title": "Snakemake Community Wall",
            "subtitle": "Follow the #Snakemake hashtag on the Fediverse",
            "hashtags": [
                "snakemake",
                "SnakemakeHackathon",
                "SnakemakeHackathon2025",
                "SnakemakeHackathon2026",
                "SnakemakeHackathon2027",
                "SnakemakeWrapper",
                "SnakemakeWrappers",
                "Snakemake_Wrapper",
                "Snakemake_Wrappers"
            ],
            "accounts": [],
            "servers": [
                "mastodon.social",
                "fosstodon.org",
                "fediscience.org",
                "scholar.social",
                "genomic.social"
            ],
            "theme": "auto",
            "autorefresh": 30,
            "showboosts": True,
            "showreplies": False,
            "showsensitive": False
        }
        
        # Write config file
        with open(output.config, 'w') as f:
            json.dump(wall_config, f, indent=2)
