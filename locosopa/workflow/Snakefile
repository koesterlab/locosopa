from pathlib import Path
import yaml
import os

page_config = yaml.load(open(config["page_config"]), Loader=yaml.SafeLoader)
page_config_dir = Path(config["page_config"]).parent
doc_config = page_config.get("docs", None)
assets = page_config.get("assets", [])


rule all:
    input:
        # TODO add print_landscape once fixed
        expand(["build/{page}.html", "build/{page}.css"], page=["index", "print_landscape"]),
        expand("build/{asset}", asset=assets),
        "build/docs" if doc_config else [],


rule build_css:
    input:
        "build/{page}.html",
        css="src/style.css",
    output:
        "build/{page}.css",
    conda:
        "envs/nodejs.yaml"
    shell:
        "npm install; npx tailwindcss -i {input.css} -o {output}"


rule build_html:
    input:
        config=config["page_config"],
        page="src/{page}.ytml.yaml",
    output:
        "build/{page}.html",
    wildcard_constraints:
        page="[^/]+",
    conda:
        "envs/ytml.yaml"
    shell:
        "ytml src build {input.config} {wildcards.page}.ytml.yaml"


rule build_docs:
    input:
        page_config=config["page_config"],
        src=lambda w: page_config_dir / page_config["docs"]["src"],
        sphinx_conf=workflow.source_path("../src/docs/conf.py"),
        docutils_conf=workflow.source_path("../src/docs/docutils.conf"),
        css=workflow.source_path("../src/docs/custom.css"),
    output:
        directory("build/docs"),
    conda:
        "envs/sphinx.yaml"
    params:
        page_config=lambda w, input: os.path.abspath(input.page_config),
        logos=[str(page_config_dir / logo) for logo in page_config["logo"].values()],
    shell:
        "tmpdir=$(mktemp -d); "
        "cp {input.sphinx_conf} $tmpdir; "
        "cp {input.docutils_conf} $tmpdir; "
        "mkdir $tmpdir/_static; "
        "cp {params.logos} $tmpdir/_static; "
        "cp {input.css} $tmpdir/_static; "
        "LOCOSOPA_CONFIG={params.page_config} sphinx-build -b html -c $tmpdir {input.src} {output}"


rule copy_asset:
    input:
        page_config_dir / "{asset}",
    output:
        "build/{asset}",
    shell:
        "mkdir -p $(dirname {output}); "
        "cp {input} {output}"
